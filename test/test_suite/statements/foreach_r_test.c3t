// #target: macos-x64
module test;
import std::io;

fn void main()
{
	int[*] x = { 1, 5, 10 };
	int[] y = &x;
	foreach_r (int i, val : y)
	{
		io::printfln("%d: %d", i, val);
	}
}

/* #expect: test.ll

entry:
  %x = alloca [3 x i32], align 4
  %y = alloca %"int[]", align 8
  %.anon = alloca i64, align 8
  %i = alloca i32, align 4
  %val = alloca i32, align 4
  %retparam = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [2 x %variant], align 16
  %0 = bitcast [3 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i32]* @.__const to i8*), i32 12, i1 false)
  %1 = bitcast [3 x i32]* %x to i32*
  %2 = insertvalue %"int[]" undef, i32* %1, 0
  %3 = insertvalue %"int[]" %2, i64 3, 1
  store %"int[]" %3, %"int[]"* %y, align 8
  %4 = getelementptr inbounds %"int[]", %"int[]"* %y, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %.anon, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %voiderr, %entry
  %6 = load i64, i64* %.anon, align 8
  %gt = icmp ugt i64 %6, 0
  br i1 %gt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %7 = load i64, i64* %.anon, align 8
  %sub = sub i64 %7, 1
  store i64 %sub, i64* %.anon, align 8
  %8 = load i64, i64* %.anon, align 8
  %uisitrunc = trunc i64 %8 to i32
  store i32 %uisitrunc, i32* %i, align 4
  %9 = getelementptr inbounds %"int[]", %"int[]"* %y, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = load i64, i64* %.anon, align 8
  %ptroffset = getelementptr inbounds i32, i32* %10, i64 %11
  %12 = load i32, i32* %ptroffset, align 4
  store i32 %12, i32* %val, align 4
  store %"char[]" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i64 6 }, %"char[]"* %taddr, align 8
  %13 = bitcast %"char[]"* %taddr to { i8*, i64 }*
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 0
  %lo = load i8*, i8** %14, align 8
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 1
  %hi = load i64, i64* %15, align 8
  %16 = bitcast i32* %i to i8*
  %17 = insertvalue %variant undef, i8* %16, 0
  %18 = insertvalue %variant %17, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %19 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots, i64 0, i64 0
  store %variant %18, %variant* %19, align 16
  %20 = bitcast i32* %val to i8*
  %21 = insertvalue %variant undef, i8* %20, 0
  %22 = insertvalue %variant %21, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %23 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots, i64 0, i64 1
  store %variant %22, %variant* %23, align 16
  %24 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 1
  store i64 2, i64* %24, align 8
  %25 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 0
  %26 = bitcast [2 x %variant]* %varargslots to %variant*
  store %variant* %26, %variant** %25, align 8
  %27 = bitcast %"variant[]"* %vararg to { i8*, i64 }*
  %28 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %27, i32 0, i32 0
  %lo1 = load i8*, i8** %28, align 8
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %27, i32 0, i32 1
  %hi2 = load i64, i64* %29, align 8
  %30 = call i64 @std_io_printfln(i64* %retparam, i8* %lo, i64 %hi, i8* %lo1, i64 %hi2)
  %not_err = icmp eq i64 %30, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %loop.body
  br label %voiderr

voiderr:                                          ; preds = %after_check, %loop.body
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  ret void
}
