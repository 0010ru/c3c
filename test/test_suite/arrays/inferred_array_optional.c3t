// #target: macos-x64
module test;

fn int! foo() => 1;

fn int main()
{
	int[*]! x = { 1, 2 };
	int[*]! y = { foo(), foo() };
	int[<*>]! x2 = { 1, 2 };
	int[<*>]! y2 = { foo(), foo() };
	return 1;
}

/* #expect: test.ll


define i32 @main() #0 {
entry:
  %x = alloca [2 x i32], align 4
  %x.f = alloca i64, align 8
  %y = alloca [2 x i32], align 4
  %y.f = alloca i64, align 8
  %retparam = alloca i32, align 4
  %retparam1 = alloca i32, align 4
  %x2 = alloca <2 x i32>, align 8
  %x2.f = alloca i64, align 8
  %y2 = alloca <2 x i32>, align 8
  %y2.f = alloca i64, align 8
  %retparam5 = alloca i32, align 4
  %retparam9 = alloca i32, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %x, ptr align 4
  store i64 0, ptr %x.f, align 8
  %0 = getelementptr inbounds [2 x i32], ptr %y, i64 0, i64 0
  %1 = call i64 @test.foo(ptr %retparam)
  %not_err = icmp eq i64 %1, 0
  %2 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %2, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %entry
  store i64 %1, ptr %y.f, align 8
  br label %after_assign

after_check:                                      ; preds = %entry
  %3 = load i32, ptr %retparam, align 4
  store i32 %3, ptr %0, align 4
  %4 = getelementptr inbounds [2 x i32], ptr %y, i64 0, i64 1
  %5 = call i64 @test.foo(ptr %retparam1)
  %not_err2 = icmp eq i64 %5, 0
  %6 = call i1 @llvm.expect.i1(i1 %not_err2, i1 true)
  br i1 %6, label %after_check4, label %assign_optional3

assign_optional3:                                 ; preds = %after_check
  store i64 %5, ptr %y.f, align 8
  br label %after_assign

after_check4:                                     ; preds = %after_check
  %7 = load i32, ptr %retparam1, align 4
  store i32 %7, ptr %4, align 4
  store i64 0, ptr %y.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %after_check4, %assign_optional3, %assign_optional
  store <2 x i32> <i32 1, i32 2>, ptr %x2, align 8
  store i64 0, ptr %x2.f, align 8
  %8 = call i64 @test.foo(ptr %retparam5)
  %not_err6 = icmp eq i64 %8, 0
  %9 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true)
  br i1 %9, label %after_check8, label %assign_optional7

assign_optional7:                                 ; preds = %after_assign
  store i64 %8, ptr %y2.f, align 8
  br label %after_assign13

after_check8:                                     ; preds = %after_assign
  %10 = load i32, ptr %retparam5, align 4
  %11 = insertelement <2 x i32> undef, i32 %10, i64 0
  %12 = call i64 @test.foo(ptr %retparam9)
  %not_err10 = icmp eq i64 %12, 0
  %13 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true)
  br i1 %13, label %after_check12, label %assign_optional11

assign_optional11:                                ; preds = %after_check8
  store i64 %12, ptr %y2.f, align 8
  br label %after_assign13

after_check12:                                    ; preds = %after_check8
  %14 = load i32, ptr %retparam9, align 4
  %15 = insertelement <2 x i32> %11, i32 %14, i64 1
  store <2 x i32> %15, ptr %y2, align 8
  store i64 0, ptr %y2.f, align 8
  br label %after_assign13
