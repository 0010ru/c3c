// #target: macos-x64
module test;
import std;

$expand(test());

struct Foo
{
	int a;
	int b;
}
macro test()
{
	var $out = "struct Copy {";
	$foreach ($member : Foo.membersof)
		$out = $concat($out, " ", $member.typeid.nameof, " ", $member.nameof, ";");
	$endforeach;
	return $concat($out, "}");
}

fn void main()
{
	var $a = "a = 4;";
	$expand($concat("int a = 1;", $a));
	Copy x = { 1, 3 };
	x.a = 4;
}

/* #expect: test.ll

%Copy = type { i32, i32 }

define void @test.main() #0 {
entry:
  %a = alloca i32, align 4
  %x = alloca %Copy, align 4
  store i32 1, ptr %a, align 4
  store i32 4, ptr %a, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %x, ptr align 4 @.__const, i32 8, i1 false)
  store i32 4, ptr %x, align 4
  ret void
}
